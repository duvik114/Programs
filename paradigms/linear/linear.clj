(defn fu [f] (fn [& args] (apply mapv f args)))
(def v+ (fu +))
(def v- (fu -))
(def v* (fu *))
(def vd (fu /))
(def scalar (fn [v1 v2] (apply + (v* v1 v2))))
(def vect (fn [v1 v2] (vector
                        (- (* (double (get v1 1)) (double (get v2 2))) (* (double (get v1 2)) (double (get v2 1))))
                        (- (* (double (get v1 2)) (double (get v2 0))) (* (double (get v1 0)) (double (get v2 2))))
                        (- (* (double (get v1 0)) (double (get v2 1))) (* (double (get v1 1)) (double (get v2 0))))
                        )))
(def v*s (fn [vecc s] (mapv * vecc (repeat (count vecc) s))))
(def m+ (fu v+))
(def m- (fu v-))
(def m* (fu v*))
(def md (fu vd))
(def transpose (fn [m] (apply mapv vector m)))
(def m*s (fn [m s] (vec (for [x m] (v*s x s)))))
(def m*v (fn [m v] (mapv scalar m (repeat (count m) v))))
(def m*m (fn [m1 m2] (transpose (vec (for [x (transpose m2)] (m*v m1 x))))))
(def c+ (fu m+))
(def c- (fu m-))
(def c* (fu m*))
(def cd (fu md))
